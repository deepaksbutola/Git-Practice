import React from 'react';
import { Line } from 'react-chartjs-2';


export default function App() {

  const data = [
    { timestamp: "2024-11-14 13:00:00", achived: 0, target: 0 },
    { timestamp: "2024-11-14 13:30:00", achived: 2500, target: 0 },
    { timestamp: "2024-11-14 14:00:00", achived: 5000, target: 5000 },
    { timestamp: "2024-11-14 14:30:00", achived: 7500, target: 5000 },
    { timestamp: "2024-11-14 15:00:00", achived: 10000, target: 10000 },
    { timestamp: "2024-11-14 15:30:00", achived: 12500, target: 15000 },
    { timestamp: "2024-11-14 16:00:00", achived: 15000, target: 15000 },
    { timestamp: "2024-11-14 16:30:00", achived: 17500, target: 20000 },
    { timestamp: "2024-11-14 17:00:00", achived: 20000, target: 20000 },
    { timestamp: "2024-11-14 17:30:00", achived: 22500, target: 25000 },
    { timestamp: "2024-11-14 18:00:00", achived: 25000, target: 25000 },
    { timestamp: "2024-11-14 18:30:00", achived: 27500, target: 30000 },
    { timestamp: "2024-11-14 19:00:00", achived: 30000, target: 30000 },
    { timestamp: "2024-11-14 19:30:00", achived: 32500, target: 35000 },
    { timestamp: "2024-11-14 20:00:00", achived: 35000, target: 35000 }
  ];
  
  const chartData = {
    labels: data.map(item => item.timestamp),
    datasets: [
      {
        label: 'Achieved',
        data: data.map(item => item.achived),
        borderColor: 'rgba(75,192,192,1)',
        fill: false,
        pointRadius: 0, // Remove dots from the line
        hoverRadius: 0

      },
      {
        label: 'Target',
        data: data.map(item => item.target),
        borderColor: 'rgba(153,102,255,1)',
        fill: false,
        pointRadius: 0, // Remove dots from the line
        hoverRadius: 0
      },
    ],
  };
  
 
  const options = {
    scales: {
      x: {
        display: false,
      },
      y: {
        display: false,
      },
    },
    plugins: {
      legend: {
        display: false, // Remove legend
      },
      tooltip: {
        enabled: false, // Disable the default tooltip
        external: function(context) {
          // Tooltip Element
          let tooltipEl = document.getElementById('chartjs-tooltip');

          // Create element on first render
          if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.className = 'bg-black text-white rounded-lg p-2'; // Tailwind CSS classes
            document.body.appendChild(tooltipEl);
          }

          // Hide if no tooltip
          const tooltipModel = context.tooltip;
          if (tooltipModel.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
          }

          // Set caret position
          tooltipEl.classList.remove('above', 'below', 'no-transform');
          if (tooltipModel.yAlign) {
            tooltipEl.classList.add(tooltipModel.yAlign);
          } else {
            tooltipEl.classList.add('no-transform');
          }

          // Set Text
          if (tooltipModel.body) {
            const index = tooltipModel.dataPoints[0].dataIndex;
            const timestamp = data[index].timestamp;
            const achieved = data[index].achived;
            const target = data[index].target;

            const innerHtml = `
              <div><strong>Timestamp:</strong> ${timestamp}</div>
              <div><strong>Achieved:</strong> ${achieved}</div>
              <div><strong>Target:</strong> ${target}</div>
            `;

            tooltipEl.innerHTML = innerHtml;
          }

          const position = context.chart.canvas.getBoundingClientRect();
          tooltipEl.style.opacity = 1;
          tooltipEl.style.position = 'absolute';
          tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
          tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';
          tooltipEl.style.pointerEvents = 'none';
        }
      }
    },
    interaction: {
      mode: 'nearest',
      intersect: false,
    },
  };
  return (
    <div>
          <Line data={chartData} options={options} />

    </div>
  );
}
